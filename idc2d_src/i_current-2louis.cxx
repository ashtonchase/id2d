// generated by Fast Light User Interface Designer (fluid) version 1.0108

#include "i_dc.h"
#include "i_current-2.h"
#include <stdio.h>
#include <string.h>
#include "i_current_private.h"
#include "button_callbacks.h"

Fl_Double_Window *main_panel=(Fl_Double_Window *)0;

static void cb_Quit(Fl_Menu_*, void*) {
  exit(0);
}

static void cb_Configure(Fl_Menu_*, void*) {
  config_window->show();
}

static void cb_About(Fl_Menu_*, void*) {
  about_window->show();
}

Fl_Menu_Item menu_[] = {
 {"File", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"&Quit", 0x40071,  (Fl_Callback*)cb_Quit, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Options", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Configure", 0,  (Fl_Callback*)cb_Configure, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Help", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"About", 0,  (Fl_Callback*)cb_About, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Group *group_input=(Fl_Group *)0;

Fl_Button *btn_open_image=(Fl_Button *)0;

static void cb_btn_open_image(Fl_Button*, void*) {
  fc_btn_open_image();
}

Fl_Button *btn_check=(Fl_Button *)0;

static void cb_btn_check(Fl_Button*, void*) {
  fc_btn_check();
}

Fl_Button *btn_source=(Fl_Button *)0;

static void cb_btn_source(Fl_Button*, void*) {
  fc_btn_color(btn_source);
}

Fl_Button *btn_gnd=(Fl_Button *)0;

static void cb_btn_gnd(Fl_Button*, void*) {
  fc_btn_color(btn_gnd);
}

Fl_Button *btn_isolator=(Fl_Button *)0;

static void cb_btn_isolator(Fl_Button*, void*) {
  fc_btn_color(btn_isolator);
}

Fl_Choice *choice_material_1=(Fl_Choice *)0;
Fl_Choice *choice_material_2=(Fl_Choice *)0;
Fl_Choice *choice_material_3=(Fl_Choice *)0;
Fl_Choice *choice_material_4=(Fl_Choice *)0;

Material_Properties Materials[] = { // This is the materials database
// The numbers for raw materials came from the Electronic Engineer's handbook, 2nd edition, McGraw Hill (C)1982
// The numbers for solders came from various manufacturer's published data.
// Use menu_choice_material's value as index into this property array
// Values not known at time of writing:
//
//    "Solder SAC359 Sn95.6Ag3.5Cu0.9".Density                  <- 7.4 used as a placeholder
//    "Solder SN100C Sn99.3Cu0.65Ni0.05Ge".Density              <- 7.4 used as a placeholder
//
//    "Solder SAC359 Sn95.6Ag3.5Cu0.9".Thermal_Conductivity     <- 64 used as a placeholder
//    "Solder SAC387 Sn95.5Ag3.8Cu0.7".Thermal_Conductivity     <- 64 used as a placeholder
//    "Solder SAC396 Sn95.5Ag3.9Cu0.6".Thermal_Conductivity     <- 64 used as a placeholder
//    "Solder SAC405 Sn95.5Ag4.0Cu0.5".Thermal_Conductivity     <- 64 used as a placeholder
//    "Solder SN100C Sn99.3Cu0.65Ni0.05Ge".Thermal_Conductivity <- 64 used as a placeholder
//    "Solder Sn99.3Cu0.7".Thermal_Conductivity                 <- 64 used as a placeholder
//    "Solder Sn42.0Bi58.0".Thermal_Conductivity                <- 100 used as a placeholder
//
//    "Solder SAC359 Sn95.6Ag3.5Cu0.9".Resistivity              <- 13.5 used as a placeholder
//    "Solder SAC396 Sn95.5Ag3.9Cu0.6".Resistivity              <- 12.65 used as a placeholder
//    "Solder SAC405 Sn95.5Ag4.0Cu0.5".Resistivity              <- 12.2 used as a placeholder
//
//    "Solder H63A Sn63Pb37".Resistance_TempCo
//    "Solder Sn60Pb40".Resistance_TempCo
//    "Solder Castin Sn96.1Ag2.6Cu0.8Sb0.5".Resistance_TempCo
//    "Solder SAC305 Sn96.5Ag3.0Cu0.5".Resistance_TempCo
//    "Solder SAC359 Sn95.6Ag3.5Cu0.9".Resistance_TempCo
//    "Solder SAC387 Sn95.5Ag3.8Cu0.7".Resistance_TempCo
//    "Solder SAC396 Sn95.5Ag3.9Cu0.6".Resistance_TempCo
//    "Solder SAC405 Sn95.5Ag4.0Cu0.5".Resistance_TempCo
//    "Solder SN100C Sn99.3Cu0.65Ni0.05Ge".Resistance_TempCo
//    "Solder Sn99.3Cu0.7".Resistance_TempCo
//    "Solder Sn42.0Bi58.0".Resistance_TempCo
//
//    "Solder Castin Sn96.1Ag2.6Cu0.8Sb0.5".Expansion_TempCo
//    "Solder SAC305 Sn96.5Ag3.0Cu0.5".Expansion_TempCo
//    "Solder SAC359 Sn95.6Ag3.5Cu0.9".Expansion_TempCo
//    "Solder SAC387 Sn95.5Ag3.8Cu0.7".Expansion_TempCo
//    "Solder SAC396 Sn95.5Ag3.9Cu0.6".Expansion_TempCo
//    "Solder SAC405 Sn95.5Ag4.0Cu0.5".Expansion_TempCo
//    "Solder SN100C Sn99.3Cu0.65Ni0.05Ge".Expansion_TempCo
//
// Unknown densities are loaded with something close here. These need updating as values are learned.
// Unknown thermal conductivities are loaded with something close here. These need updating as values are learned.
// Unknown resistivities are loaded with something close here. These need updating as values are learned.
// Unknown tempcos are all left at 0, effectively disabling them (no temp slope). These will need something else when the member is used.
//
//         Density       Resistivity         Expansion_TempCo 
//               Thermal_Conductivity  Resistance_TempCo   pName
// Materials that may be used in PCB construction or the components mounted thereon
	{  2.7 ,   2.38,   2.67      , 4.5 , 23.5, "Aluminum (Al)"                       }, // index 0 
	{  6.68,  23.8 ,  40.1       , 5.1 , 11.0, "Antimony (Sb)"                       }, // index 1 
	{  9.8 ,   9.0 , 117.0       , 4.6 , 13.4, "Bismuth (Bi)"                        }, // index 2 
	{  8.64, 103.0 ,   7.3       , 4.3 , 31.0, "Cadmium (Cd)"                        }, // index 3 
	{  7.1 ,  91.3 ,  13.2       , 2.14,  6.5, "Chromium (Cr)"                       }, // index 4 
	{  8.96, 397.0 ,   1.694     , 4.3 , 17.0, "Copper (Cu)"                         }, // index 5 
	{ 19.3 , 315.5 ,   2.2       , 4.0 , 14.1, "Gold (Au)"                           }, // index 6 
	{  7.3 ,  80.0 ,   8.8       , 5.2 , 24.8, "Indium (In)"                         }, // index 7 
	{  7.87,  78.2 ,  10.1       , 6.5 , 12.1, "Iron (Fe)"                           }, // index 8 
	{ 11.68,  34.9 ,  20.6       , 4.2 , 29.0, "Lead (Pb)"                           }, // index 9 
	{ 10.2 , 137.0 ,   5.7       , 4.35,  5.1, "Molybdenum (Mo)"                     }, // index 10
	{  8.9 ,  88.5 ,   6.9       , 6.8 , 13.3, "Nickel (Ni)"                         }, // index 11
	{ 12.0 ,  75.5 ,  10.8       , 4.2 , 11.0, "Palladium (Pd)"                      }, // index 12
	{ 21.45,  71.5 ,  10.58      , 3.92,  9.0, "Platinum (Pt)"                       }, // index 13
	{ 10.5 , 425.0 ,   1.63      , 4.1 , 19.1, "Silver (Ag)"                         }, // index 14
	{  7.3 ,  73.2 ,  12.6       , 4.6 , 23.5, "Tin (Sn)"                            }, // index 15
	{ 19.3 , 174.0 ,   5.4       , 4.8 ,  4.5, "Tungsten (W) "                       }, // index 16
	{  7.14, 119.5 ,   5.96      , 4.2 , 31.0, "Zinc (Zn)"                           }, // index 17
// Standard Tin Lead Solder formulations:
	{  8.4 ,  50.0 ,  14.95      , 0.0 , 25.0, "Solder H63A Sn63Pb37"                }, // index 18
	{  8.5 ,  49.0 ,  14.96      , 0.0 , 25.0, "Solder Sn60Pb40"                     }, // index 19
// Standard lead free Solder formulations:
	{  7.37,  57.26,  12.09989448, 0.0 ,  0.0, "Solder Castin Sn96.1Ag2.6Cu0.8Sb0.5" }, // index 20
	{  7.4 ,  64.0 ,  14.99956397, 0.0 ,  0.0, "Solder SAC305 Sn96.5Ag3.0Cu0.5"      }, // index 21
	{  7.4 ,  64.0 ,  13.5       , 0.0 ,  0.0, "Solder SAC359 Sn95.6Ag3.5Cu0.9"      }, // index 22
	{  7.4 ,  64.0 ,  13.03030303, 0.0 ,  0.0, "Solder SAC387 Sn95.5Ag3.8Cu0.7"      }, // index 23
	{  7.4 ,  64.0 ,  12.65      , 0.0 ,  0.0, "Solder SAC396 Sn95.5Ag3.9Cu0.6"      }, // index 24
	{  7.4 ,  64.0 ,  12.2       , 0.0 ,  0.0, "Solder SAC405 Sn95.5Ag4.0Cu0.5"      }, // index 25
	{  7.4 ,  64.0 ,  12.37410072, 0.0 ,  0.0, "Solder SN100C Sn99.3Cu0.65Ni0.05Ge"  }, // index 26
	{  8.19,  76.0 ,  19.54545455, 0.0 , 28.0, "Solder Sn99.3Cu0.7"                  }, // index 27
	{  8.72, 100.0 ,  38.22222222, 0.0 , 13.8, "Solder Sn42.0Bi58.0"                 }, // index 28
	{ 0.0, 0.0, 0.0, 0.0, 0.0, "End of list"},
};

Fl_Menu_Item menu_choice_material[] = {
 {Materials[0 ].pName, 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0}, // index 0 
 {Materials[1 ].pName, 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0}, // index 1 
 {Materials[2 ].pName, 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0}, // index 2 
 {Materials[3 ].pName, 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0}, // index 3 
 {Materials[4 ].pName, 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0}, // index 4 
 {Materials[5 ].pName, 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0}, // index 5 
 {Materials[6 ].pName, 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0}, // index 6 
 {Materials[7 ].pName, 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0}, // index 7 
 {Materials[8 ].pName, 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0}, // index 8 
 {Materials[9 ].pName, 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0}, // index 9 
 {Materials[10].pName, 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0}, // index 10
 {Materials[11].pName, 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0}, // index 11
 {Materials[12].pName, 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0}, // index 12
 {Materials[13].pName, 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0}, // index 13
 {Materials[14].pName, 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0}, // index 14
 {Materials[15].pName, 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0}, // index 15
 {Materials[16].pName, 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0}, // index 16
 {Materials[17].pName, 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0}, // index 17
 {Materials[18].pName, 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0}, // index 18
 {Materials[19].pName, 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0}, // index 19
 {Materials[20].pName, 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0}, // index 20
 {Materials[21].pName, 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0}, // index 21
 {Materials[22].pName, 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0}, // index 22
 {Materials[23].pName, 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0}, // index 23
 {Materials[24].pName, 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0}, // index 24
 {Materials[25].pName, 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0}, // index 25
 {Materials[26].pName, 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0}, // index 26
 {Materials[27].pName, 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0}, // index 27
 {Materials[28].pName, 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0}, // index 28
// entry template
 {"",   0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0}, // index 0
 {0,                      0,  0, 0, 0, 0,               0, 0,  0}
};

const int Material_DB_entries = (sizeof(Materials)/sizeof(Materials[0]));

/*****************************************************************************/
static void cb_metal_chosen(Fl_Choice* pChoice)
{// Get the parameters for the selected metal from the datbase and put them in the correct layer's settings
	fc_metal_chosen(pChoice);
}
/*****************************************************************************/

Fl_Button *btn_metal_1=(Fl_Button *)0;

static void cb_btn_metal_1(Fl_Button*, void*) {
  fc_btn_color(btn_metal_1);
  choice_material_1->color(btn_metal_1->color());
}

Fl_Button *btn_metal_2=(Fl_Button *)0;

static void cb_btn_metal_2(Fl_Button*, void*) {
  fc_btn_color(btn_metal_2);
  choice_material_2->color(btn_metal_2->color());
}

Fl_Button *btn_metal_3=(Fl_Button *)0;

static void cb_btn_metal_3(Fl_Button*, void*) {
  fc_btn_color(btn_metal_3);
  choice_material_3->color(btn_metal_3->color());
}

Fl_Button *btn_metal_4=(Fl_Button *)0;

static void cb_btn_metal_4(Fl_Button*, void*) {
  fc_btn_color(btn_metal_4);
  choice_material_4->color(btn_metal_4->color());
}

Fl_Value_Input *source_voltage=(Fl_Value_Input *)0;

Fl_Value_Input *conductance_m1=(Fl_Value_Input *)0;

Fl_Value_Input *conductance_m2=(Fl_Value_Input *)0;

Fl_Value_Input *conductance_m3=(Fl_Value_Input *)0;

Fl_Value_Input *conductance_m4=(Fl_Value_Input *)0;

Fl_Box *pixel_label=(Fl_Box *)0;

Fl_Value_Input *pixel_x_umeters=(Fl_Value_Input *)0;

Fl_Value_Input *pixel_y_umeters=(Fl_Value_Input *)0;

/*****************************************************************************/
static void cb_conductance_m1_changed(Fl_Value_Input *pEdit)
{// change the selector to the relevant entry if there is one, else blank it
	fc_conductance_edit_changed(pEdit, choice_material_1);
}

static void cb_conductance_m2_changed(Fl_Value_Input *pEdit)
{// change the selector to the relevant entry if there is one, else blank it
	fc_conductance_edit_changed(pEdit, choice_material_2);
}

static void cb_conductance_m3_changed(Fl_Value_Input *pEdit)
{// change the selector to the relevant entry if there is one, else blank it
	fc_conductance_edit_changed(pEdit, choice_material_3);
}

static void cb_conductance_m4_changed(Fl_Value_Input *pEdit)
{// change the selector to the relevant entry if there is one, else blank it
	fc_conductance_edit_changed(pEdit, choice_material_4);
}

Fl_Button *btn_open_cfg=(Fl_Button *)0;

static void cb_btn_open_cfg(Fl_Button*, void*) {
  fc_btn_open_cfg();
}
Fl_Button *btn_save_cfg=(Fl_Button *)0;

static void cb_btn_save_cfg(Fl_Button*, void*) {
  fc_btn_save_cfg();
}

Fl_Image_Display *copper_plane_s=(Fl_Image_Display *)0;

Fl_Group *group_analyze=(Fl_Group *)0;

Fl_Button *btn_analyze=(Fl_Button *)0;

static void cb_btn_analyze(Fl_Button*, void*) {
  fc_btn_analyze();
}

Fl_Button *btn_show=(Fl_Button *)0;

static void cb_btn_show(Fl_Button*, void*) {
  fc_btn_show();
}

Fl_Value_Input *input_max_iter=(Fl_Value_Input *)0;

Fl_Value_Input *input_cutoff=(Fl_Value_Input *)0;

Fl_Choice *choice_cu_thickness=(Fl_Choice *)0;

Fl_Menu_Item menu_choice_cu_thickness[] = {
 {"4.257\xB5m (1/8oz)",   0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0}, // index 0
 {"5.676\xB5m (1/6oz)",   0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0}, // index 1
 {"8.514\xB5m (1/4oz)",   0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0}, // index 2
 {"11.352\xB5m (1/3oz)",  0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0}, // index 3
 {"17.029\xB5m (1/2oz)",  0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0}, // index 4
 {"25.543\xB5m (3/4oz)",  0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0}, // index 5
 {"34.057\xB5m (1oz)",    0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0}, // index 6
 {"51.086\xB5m (1.5oz)",  0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0}, // index 7
 {"68.114\xB5m (2oz)",    0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0}, // index 8
 {"85.143\xB5m (2.5oz)",  0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0}, // index 9
 {"102.171\xB5m (3oz)",   0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0}, // index 10
 {0,                      0,  0, 0, 0, 0,               0, 0,  0}
};

Fl_Spinner *spinner_threads=(Fl_Spinner *)0;

Fl_Button *btn_save_log=(Fl_Button *)0;

static void cb_btn_save_log(Fl_Button*, void*) {
  fc_btn_save_log();
}

Fl_Progress    *ProgBar = (Fl_Progress*)0;

Fl_Browser *main_log=(Fl_Browser *)0;

Fl_Group *group_output=(Fl_Group *)0;

Fl_Choice *choice_colormap=(Fl_Choice *)0;

static void cb_choice_colormap(Fl_Choice*, void*) {
  fc_choice_colormap();
}

Fl_Menu_Item menu_choice_colormap[] = {
 {"Default", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Gray", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Jet", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Hot", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Cold", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Choice *choice_show=(Fl_Choice *)0;

static void cb_choice_show(Fl_Choice*, void*) {
  fc_choice_show();
}

Fl_Menu_Item menu_choice_show[] = {
 {"Current density", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Current density X", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Current density Y", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Current X vs Y", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Voltage", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Button *btn_save_image=(Fl_Button *)0;

static void cb_btn_save_image(Fl_Button*, void*) {
  fc_btn_save_image();
}

Fl_Button *btn_save_data=(Fl_Button *)0;

static void cb_btn_save_data(Fl_Button*, void*) {
  fc_btn_save_data();
}

Fl_Value_Output *out_R=(Fl_Value_Output *)0;

Fl_Value_Output *out_G=(Fl_Value_Output *)0;

Fl_Value_Output *out_B=(Fl_Value_Output *)0;

Fl_Value_Output *out_I=(Fl_Value_Output *)0;

Fl_Value_Output *out_Ix=(Fl_Value_Output *)0;

Fl_Value_Output *out_Iy=(Fl_Value_Output *)0;

Fl_Value_Output *out_V=(Fl_Value_Output *)0;

Fl_Image_Display *current_density_plot_s=(Fl_Image_Display *)0;

Fl_Double_Window* make_window() {
  { main_panel = new Fl_Double_Window(880, 645, "Copper Plane Current Analysis");
    main_panel->when(FL_WHEN_NEVER);
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(0, 0, 880, 24);
      o->labeltype(FL_NO_LABEL);
      o->align(FL_ALIGN_TOP_LEFT);
      o->menu(menu_);
    } // Fl_Menu_Bar* o
    { Fl_Tabs* o = new Fl_Tabs(5, 30, 870, 610);
      o->box(FL_UP_BOX);
      o->align(FL_ALIGN_CENTER);
      { group_input = new Fl_Group(5, 55, 870, 585, "Input");
        { Fl_Group* o = new Fl_Group(740, 70, 120, 560);
          { btn_open_image = new Fl_Button(740, 85, 120, 24, "&Open image");
            btn_open_image->shortcut(0x4006f);
            btn_open_image->labelsize(12);
            btn_open_image->callback((Fl_Callback*)cb_btn_open_image);
          } // Fl_Button* btn_open_image
          { btn_check = new Fl_Button(740, 115, 120, 24, "Chec&k");
            btn_check->shortcut(0x4006b);
            btn_check->labelsize(12);
            btn_check->callback((Fl_Callback*)cb_btn_check);
            btn_check->deactivate();
          } // Fl_Button* btn_check
          { btn_source = new Fl_Button(740, 145, 60, 24, "Source");
            btn_source->labelsize(12);
            btn_source->callback((Fl_Callback*)cb_btn_source);
          } // Fl_Button* btn_source
          { btn_gnd = new Fl_Button(740, 175, 60, 24, "GND");
            btn_gnd->labelsize(12);
            btn_gnd->callback((Fl_Callback*)cb_btn_gnd);
          } // Fl_Button* btn_gnd
          { btn_isolator = new Fl_Button(740, 205, 60, 24, "FR4");
            btn_isolator->labelsize(12);
            btn_isolator->callback((Fl_Callback*)cb_btn_isolator);
          } // Fl_Button* btn_isolator
          { source_voltage = new Fl_Value_Input(810, 145, 50, 24);
            source_voltage->tooltip("Volts");
            source_voltage->labelsize(12);
            source_voltage->minimum(1e-006);
            source_voltage->value(0.1);
            source_voltage->textfont(4);
            source_voltage->textsize(12);
            source_voltage->align(FL_ALIGN_RIGHT);
          } // Fl_Value_Input* source_voltage
          { Fl_Value_Input* o = new Fl_Value_Input(810, 175, 50, 24);
            o->tooltip("Volts");
            o->labelsize(12);
            o->textfont(4);
            o->textsize(12);
            o->align(FL_ALIGN_RIGHT);
            o->deactivate();
          } // Fl_Value_Input* o
//===================================================================================================
          { btn_metal_1 = new Fl_Button(740, 235, 60, 24, "Metal 1");
            btn_metal_1->labelsize(12);
            btn_metal_1->callback((Fl_Callback*)cb_btn_metal_1);
          } // Fl_Button* btn_metal_1
          { conductance_m1 = new Fl_Value_Input(810, 235, 50, 24);
            conductance_m1->tooltip("Conductivity in mega Simemens per meter");
            conductance_m1->labelsize(12);
            conductance_m1->maximum(100);
            conductance_m1->value(59.6);
            conductance_m1->textfont(4);
            conductance_m1->textsize(12);
            conductance_m1->align(FL_ALIGN_LEFT);
            conductance_m1->precision(2);
            conductance_m1->callback((Fl_Callback*)cb_conductance_m1_changed);
          } // Fl_Value_Input* conductance_m1
          { choice_material_1 = new Fl_Choice(740, 265, 120, 24);
            choice_material_1->tooltip("Set Metal 1 conductivity by material");
            choice_material_1->box(FL_THIN_UP_BOX);
            choice_material_1->down_box(FL_BORDER_BOX);
            choice_material_1->labelsize(12);
            choice_material_1->textsize(12);
            choice_material_1->align(FL_ALIGN_TOP_LEFT);
            choice_material_1->menu(menu_choice_material);
            choice_material_1->callback((Fl_Callback*)cb_metal_chosen);
          } // Fl_Choice* choice_material_1
          cb_conductance_m1_changed(conductance_m1);
//===================================================================================================
          { btn_metal_2 = new Fl_Button(740, 295, 60, 24, "Metal 2");
            btn_metal_2->labelsize(12);
            btn_metal_2->callback((Fl_Callback*)cb_btn_metal_2);
          } // Fl_Button* btn_metal_2
          { conductance_m2 = new Fl_Value_Input(810, 295, 50, 24);
            conductance_m2->tooltip("Conductivity in mega Simemens per meter");
            conductance_m2->labelsize(12);
            conductance_m2->maximum(100);
            conductance_m2->value(63);
            conductance_m2->textfont(4);
            conductance_m2->textsize(12);
            conductance_m2->align(FL_ALIGN_LEFT);
            conductance_m2->precision(2);
            conductance_m2->callback((Fl_Callback*)cb_conductance_m2_changed);
          } // Fl_Value_Input* conductance_m2
          { choice_material_2 = new Fl_Choice(740, 325, 120, 24);
            choice_material_2->tooltip("Set Metal 2 conductivity by material");
            choice_material_2->box(FL_THIN_UP_BOX);
            choice_material_2->down_box(FL_BORDER_BOX);
            choice_material_2->labelsize(12);
            choice_material_2->textsize(12);
            choice_material_2->align(FL_ALIGN_TOP_LEFT);
            choice_material_2->menu(menu_choice_material);
            choice_material_2->callback((Fl_Callback*)cb_metal_chosen);
          } // Fl_Choice* choice_material_1
          cb_conductance_m2_changed(conductance_m2);
//===================================================================================================
          { btn_metal_3 = new Fl_Button(740, 355, 60, 24, "Metal 3");
            btn_metal_3->labelsize(12);
            btn_metal_3->callback((Fl_Callback*)cb_btn_metal_3);
          } // Fl_Button* btn_metal_3
          { conductance_m3 = new Fl_Value_Input(810, 355, 50, 24);
            conductance_m3->tooltip("Conductivity in mega Simemens per meter");
            conductance_m3->labelsize(12);
            conductance_m3->maximum(100);
            conductance_m3->value(45.2);
            conductance_m3->textfont(4);
            conductance_m3->textsize(12);
            conductance_m3->align(FL_ALIGN_LEFT);
            conductance_m3->precision(2);
            conductance_m3->callback((Fl_Callback*)cb_conductance_m3_changed);
          } // Fl_Value_Input* conductance_m3
          { choice_material_3 = new Fl_Choice(740, 385, 120, 24);
            choice_material_3->tooltip("Set Metal 3 conductivity by material");
            choice_material_3->box(FL_THIN_UP_BOX);
            choice_material_3->down_box(FL_BORDER_BOX);
            choice_material_3->labelsize(12);
            choice_material_3->textsize(12);
            choice_material_3->align(FL_ALIGN_TOP_LEFT);
            choice_material_3->menu(menu_choice_material);
            choice_material_3->callback((Fl_Callback*)cb_metal_chosen);
          } // Fl_Choice* choice_material_1
          cb_conductance_m3_changed(conductance_m3);
//===================================================================================================
          { btn_metal_4 = new Fl_Button(740, 415, 60, 24, "Metal 4");
            btn_metal_4->labelsize(12);
            btn_metal_4->callback((Fl_Callback*)cb_btn_metal_4);
          } // Fl_Button* btn_metal_4
          { conductance_m4 = new Fl_Value_Input(810, 415, 50, 24);
            conductance_m4->tooltip("Conductivity in mega Simemens per meter");
            conductance_m4->labelsize(12);
            conductance_m4->maximum(100);
            conductance_m4->value(6.89);
            conductance_m4->textfont(4);
            conductance_m4->textsize(12);
            conductance_m4->align(FL_ALIGN_LEFT);
            conductance_m4->precision(2);
            conductance_m4->callback((Fl_Callback*)cb_conductance_m4_changed);
          } // Fl_Value_Input* conductance_m4
          { choice_material_4 = new Fl_Choice(740, 445, 120, 24);
            choice_material_4->tooltip("Set Metal 4 conductivity by material");
            choice_material_4->box(FL_THIN_UP_BOX);
            choice_material_4->down_box(FL_BORDER_BOX);
            choice_material_4->labelsize(12);
            choice_material_4->textsize(12);
            choice_material_4->align(FL_ALIGN_TOP_LEFT);
            choice_material_4->menu(menu_choice_material);
            choice_material_4->callback((Fl_Callback*)cb_metal_chosen);
          } // Fl_Choice* choice_material_1
          cb_conductance_m4_changed(conductance_m4);
//===================================================================================================
          { Fl_Box* pixel_label = new Fl_Box(740, 475, 120, 24, "Pix Extents (X,Y)");
          } // Fl_Box* pixel_label
          { pixel_x_umeters = new Fl_Value_Input(740, 505, 50, 24,",");
            pixel_x_umeters->tooltip("Pixel X dimension in \xB5m");
            pixel_x_umeters->labelsize(12);
            pixel_x_umeters->maximum(10000);
            pixel_x_umeters->value(1000);
            pixel_x_umeters->textfont(4);
            pixel_x_umeters->textsize(12);
            pixel_x_umeters->align(FL_ALIGN_RIGHT);
            pixel_x_umeters->precision(2);
          } // Fl_Value_Input* pixel_x_umeters
          { pixel_y_umeters = new Fl_Value_Input(800, 505, 50, 24,"uM");
            pixel_y_umeters->tooltip("Pixel X dimension in \xB5m");
            pixel_y_umeters->labelsize(12);
            pixel_y_umeters->maximum(10000);
            pixel_y_umeters->value(1000);
            pixel_y_umeters->textfont(4);
            pixel_y_umeters->textsize(12);
            pixel_y_umeters->align(FL_ALIGN_RIGHT);
            pixel_y_umeters->precision(2);
          } // Fl_Value_Input* pixel_x_umeters
          { btn_open_cfg = new Fl_Button(740, 535, 120, 24, "Open configuration");
            btn_open_cfg->labelsize(12);
            btn_open_cfg->callback((Fl_Callback*)cb_btn_open_cfg);
          } // Fl_Button* btn_open_cfg
          { btn_save_cfg = new Fl_Button(740, 565, 120, 24, "Save configuration");
            btn_save_cfg->labelsize(12);
            btn_save_cfg->callback((Fl_Callback*)cb_btn_save_cfg);
          } // Fl_Button* btn_save_cfg
          { Fl_Box* o = new Fl_Box(740, 595, 120, 215);
            o->labeltype(FL_NO_LABEL);
            Fl_Group::current()->resizable(o);
          } // Fl_Box* o
          o->end();
        } // Fl_Group* o
        { copper_plane_s = new Fl_Image_Display(15, 70, 715, 560);
          copper_plane_s->box(FL_DOWN_BOX);
          copper_plane_s->color(FL_BACKGROUND_COLOR);
          copper_plane_s->selection_color(FL_BACKGROUND_COLOR);
          copper_plane_s->labeltype(FL_NORMAL_LABEL);
          copper_plane_s->labelfont(0);
          copper_plane_s->labelsize(14);
          copper_plane_s->labelcolor(FL_FOREGROUND_COLOR);
          copper_plane_s->align(FL_ALIGN_TOP);
          copper_plane_s->when(FL_WHEN_RELEASE);
          copper_plane_s->end();
          Fl_Group::current()->resizable(copper_plane_s);
        } // Fl_Image_Display* copper_plane_s
        group_input->end();
        Fl_Group::current()->resizable(group_input);
      } // Fl_Group* group_input
      { group_analyze = new Fl_Group(5, 55, 870, 585, "Analyze");
        group_analyze->hide();
        { Fl_Group* o = new Fl_Group(740, 70, 120, 560);
          { btn_analyze = new Fl_Button(740, 85, 120, 24, "A&nalyze");
            btn_analyze->shortcut(0x4006e);
            btn_analyze->labelsize(12);
            btn_analyze->callback((Fl_Callback*)cb_btn_analyze);
            btn_analyze->deactivate();
          } // Fl_Button* btn_analyze
          { btn_show = new Fl_Button(740, 115, 120, 24, "Sho&w");
            btn_show->shortcut(0x40077);
            btn_show->labelsize(12);
            btn_show->callback((Fl_Callback*)cb_btn_show);
            btn_show->deactivate();
          } // Fl_Button* btn_show
          { input_max_iter = new Fl_Value_Input(740, 160, 120, 24, "Max. iterations");
            input_max_iter->labelsize(12);
            input_max_iter->minimum(1);
            input_max_iter->maximum(50000);
            input_max_iter->step(1);
            input_max_iter->value(10000);
            input_max_iter->textfont(4);
            input_max_iter->textsize(12);
            input_max_iter->align(FL_ALIGN_TOP_LEFT);
          } // Fl_Value_Input* input_max_iter
          { input_cutoff = new Fl_Value_Input(740, 205, 120, 24, "Cutoff");
            input_cutoff->labelsize(12);
            input_cutoff->value(1e-016);
            input_cutoff->textfont(4);
            input_cutoff->textsize(12);
            input_cutoff->align(FL_ALIGN_TOP_LEFT);
          } // Fl_Value_Input* input_cutoff
          { choice_cu_thickness = new Fl_Choice(740, 250, 120, 24, "Layer thickness");
            choice_cu_thickness->box(FL_THIN_UP_BOX);
            choice_cu_thickness->down_box(FL_BORDER_BOX);
            choice_cu_thickness->labelsize(12);
            choice_cu_thickness->textsize(12);
            choice_cu_thickness->align(FL_ALIGN_TOP_LEFT);
            choice_cu_thickness->menu(menu_choice_cu_thickness);
          } // Fl_Choice* choice_cu_thickness
          { spinner_threads = new Fl_Spinner(800, 280, 60, 24, "Threads");
            spinner_threads->labelsize(12);
            spinner_threads->value(1);
            spinner_threads->textfont(4);
            spinner_threads->textsize(12);
          } // Fl_Spinner* spinner_threads
          { btn_save_log = new Fl_Button(740, 310, 120, 24, "Save log");
            btn_save_log->shortcut(0x8006c);
            btn_save_log->labelsize(12);
            btn_save_log->callback((Fl_Callback*)cb_btn_save_log);
          } // Fl_Button* btn_save_log
          { Fl_Box* o = new Fl_Box(740, 340, 120, 290);
            o->labeltype(FL_NO_LABEL);
            Fl_Group::current()->resizable(o);
          } // Fl_Box* o
          o->end();
        } // Fl_Group* o
        { main_log = new Fl_Browser(15, 80, 715, 550, "Computation Log");
          main_log->type(3);
          main_log->labelsize(12);
          main_log->textfont(4);
          main_log->textsize(12);
          main_log->align(FL_ALIGN_TOP_LEFT);
          Fl_Group::current()->resizable(main_log);
        } // Fl_Browser* main_log
        // we want the progress bar to remain in the lower right corner and retain the same size as the application is resized
        { Fl_Group* p = new Fl_Group(734, 615, 136, 20);
          { ProgBar = new Fl_Progress(734, 615, 136, 20,""); // 30 up from the window bottom
            ProgBar->selection_color(FL_GREEN); // green progress bar
            ProgBar->align(FL_ALIGN_CENTER); // convergence value in center
            ProgBar->minimum((float)0.0);
            ProgBar->maximum((float)100.0);
            ProgBar->value((float)0.0);
          } // Fl_Progress* ProgBar
          p->resizable(NULL);
        } // FL_Group *p
        group_analyze->end();
      } // Fl_Group* group_analyze
      { group_output = new Fl_Group(5, 55, 870, 585, "Output");
        group_output->hide();
        group_output->deactivate();
        { Fl_Group* o = new Fl_Group(740, 70, 125, 560);
          { choice_colormap = new Fl_Choice(740, 95, 120, 24, "Colormap");
            choice_colormap->down_box(FL_BORDER_BOX);
            choice_colormap->labelsize(12);
            choice_colormap->textsize(12);
            choice_colormap->callback((Fl_Callback*)cb_choice_colormap);
            choice_colormap->align(FL_ALIGN_TOP_LEFT);
            choice_colormap->menu(menu_choice_colormap);
          } // Fl_Choice* choice_colormap
          { choice_show = new Fl_Choice(740, 135, 120, 24, "Show");
            choice_show->down_box(FL_BORDER_BOX);
            choice_show->labelsize(12);
            choice_show->textsize(12);
            choice_show->callback((Fl_Callback*)cb_choice_show);
            choice_show->align(FL_ALIGN_TOP_LEFT);
            choice_show->menu(menu_choice_show);
          } // Fl_Choice* choice_show
          { btn_save_image = new Fl_Button(740, 210, 120, 24, "&Save image");
            btn_save_image->tooltip("Save current image");
            btn_save_image->shortcut(0x40073);
            btn_save_image->labelsize(12);
            btn_save_image->callback((Fl_Callback*)cb_btn_save_image);
          } // Fl_Button* btn_save_image
          { btn_save_data = new Fl_Button(740, 240, 120, 24, "Save &data");
            btn_save_data->shortcut(0x40064);
            btn_save_data->labelsize(12);
            btn_save_data->callback((Fl_Callback*)cb_btn_save_data);
          } // Fl_Button* btn_save_data
          { out_R = new Fl_Value_Output(740, 295, 33, 24, "R");
            out_R->labelsize(12);
            out_R->labelcolor((Fl_Color)1);
            out_R->maximum(0);
            out_R->textfont(4);
            out_R->textsize(12);
            out_R->textcolor(1);
            out_R->align(FL_ALIGN_TOP);
          } // Fl_Value_Output* out_R
          { out_G = new Fl_Value_Output(780, 295, 33, 24, "G");
            out_G->labelsize(12);
            out_G->labelcolor((Fl_Color)2);
            out_G->maximum(0);
            out_G->textfont(4);
            out_G->textsize(12);
            out_G->textcolor(2);
            out_G->align(FL_ALIGN_TOP);
          } // Fl_Value_Output* out_G
          { out_B = new Fl_Value_Output(820, 295, 33, 24, "B");
            out_B->labelsize(12);
            out_B->labelcolor((Fl_Color)4);
            out_B->maximum(0);
            out_B->textfont(4);
            out_B->textsize(12);
            out_B->textcolor(4);
            out_B->align(FL_ALIGN_TOP);
          } // Fl_Value_Output* out_B
          { out_I = new Fl_Value_Output(740, 345, 105, 24, "Total pixel current [A]");
            out_I->tooltip("Total pixel current");
            out_I->labelsize(12);
            out_I->maximum(0);
            out_I->textfont(4);
            out_I->textsize(12);
            out_I->align(FL_ALIGN_TOP_LEFT);
          } // Fl_Value_Output* out_I
          { out_Ix = new Fl_Value_Output(740, 385, 105, 24, "X pixel current [A]");
            out_Ix->tooltip("Horizontal pixel current");
            out_Ix->labelsize(12);
            out_Ix->labelcolor((Fl_Color)59);
            out_Ix->maximum(0);
            out_Ix->textfont(4);
            out_Ix->textsize(12);
            out_Ix->align(FL_ALIGN_TOP_LEFT);
          } // Fl_Value_Output* out_Ix
          { out_Iy = new Fl_Value_Output(740, 425, 105, 24, "Y pixel current [A]");
            out_Iy->tooltip("Vertical pixel current");
            out_Iy->labelsize(12);
            out_Iy->labelcolor((Fl_Color)1);
            out_Iy->maximum(0);
            out_Iy->textfont(4);
            out_Iy->textsize(12);
            out_Iy->align(FL_ALIGN_TOP_LEFT);
          } // Fl_Value_Output* out_Iy
          { Fl_Box* o = new Fl_Box(740, 500, 120, 130);
            o->labeltype(FL_NO_LABEL);
            Fl_Group::current()->resizable(o);
          } // Fl_Box* o
          { out_V = new Fl_Value_Output(740, 465, 105, 24, "Pixel voltage [V]");
            out_V->tooltip("Pixel voltage");
            out_V->labelsize(12);
            out_V->maximum(0);
            out_V->textfont(4);
            out_V->textsize(12);
            out_V->align(FL_ALIGN_TOP_LEFT);
          } // Fl_Value_Output* out_V
          o->end();
        } // Fl_Group* o
        { current_density_plot_s = new Fl_Image_Display(15, 70, 715, 560);
          current_density_plot_s->box(FL_DOWN_BOX);
          current_density_plot_s->color(FL_BACKGROUND_COLOR);
          current_density_plot_s->selection_color(FL_BACKGROUND_COLOR);
          current_density_plot_s->labeltype(FL_NORMAL_LABEL);
          current_density_plot_s->labelfont(0);
          current_density_plot_s->labelsize(14);
          current_density_plot_s->labelcolor(FL_FOREGROUND_COLOR);
          current_density_plot_s->align(FL_ALIGN_TOP);
          current_density_plot_s->when(FL_WHEN_RELEASE);
          current_density_plot_s->end();
          Fl_Group::current()->resizable(current_density_plot_s);
        } // Fl_Image_Display* current_density_plot_s
        group_output->end();
      } // Fl_Group* group_output
      o->end();
      Fl_Group::current()->resizable(o);
    } // Fl_Tabs* o
    main_panel->size_range(880, 645);
    main_panel->end();
  } // Fl_Double_Window* main_panel
  return main_panel;
}

Fl_Box *fltk_version_box=(Fl_Box *)0;

Fl_Button *about_close=(Fl_Button *)0;

static void cb_about_close(Fl_Button* o, void*) {
  ((Fl_Window*)(o->parent()))->hide();
}

Fl_Double_Window* make_about_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(240, 320, "Plane Analysis");
    w = o;
    { new Fl_Box(25, 5, 190, 30, "Copper Plane Analysis");
    } // Fl_Box* o
    { new Fl_Box(25, 35, 190, 25, "Copyright 2007");
    } // Fl_Box* o
    { new Fl_Box(25, 60, 190, 20, "Kirby Goulet");
    } // Fl_Box* o
    { new Fl_Box(25, 80, 190, 20, "Tomislav Gotic");
    } // Fl_Box* o
    { new Fl_Box(25, 100, 190, 20, "Louis Johnson");
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(25, 120, 190, 25, "VER_STRING");
      o->label(VER_STRING);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(30, 145, 180, 25, "All Rights Reserved");
      o->color((Fl_Color)55);
    } // Fl_Box* o
    { new Fl_Box(25, 170, 190, 25, "Uses:");
    } // Fl_Box* o
    { fltk_version_box = new Fl_Box(25, 195, 190, 25);
    } // Fl_Box* fltk_version_box
    { about_close = new Fl_Button(25, 220, 190, 25, "CLOSE");
      about_close->labelcolor(FL_GRAY0);
      about_close->callback((Fl_Callback*)cb_about_close);
    } // Fl_Button* about_close
    { new Fl_Box(30, 250, 185, 20, "kgoulet@@ieee.org");
    } // Fl_Box* o
    { new Fl_Box(30, 270, 185, 20, "tgotic@@gmail.com");
    } // Fl_Box* o
    { new Fl_Box(30, 290, 185, 20, "ljohnson@@vanteon.com");
    } // Fl_Box* o
    o->end();
  } // Fl_Double_Window* o
  return w;
}

static void cb_Close(Fl_Button* o, void*) {
  ((Fl_Window*)(o->parent()))->hide();
}

Fl_Double_Window* make_config_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(542, 410, "Configuration Settings");
    w = o;
    { Fl_Tabs* o = new Fl_Tabs(25, 25, 495, 315);
      o->align(FL_ALIGN_BOTTOM);
      { Fl_Group* o = new Fl_Group(40, 55, 460, 270, "Panel 1");
        { Fl_Box* o = new Fl_Box(135, 120, 20, 25, "Future Expansion");
          o->labelfont(1);
        } // Fl_Box* o
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Tabs* o
    { Fl_Button* o = new Fl_Button(390, 360, 125, 25, "Close Panel");
      o->callback((Fl_Callback*)cb_Close);
    } // Fl_Button* o
    o->set_modal();
    o->end();
  } // Fl_Double_Window* o
  return w;
}
Fl_Double_Window* main_window; 
Fl_Double_Window* about_window; 
Fl_Double_Window* config_window; 
