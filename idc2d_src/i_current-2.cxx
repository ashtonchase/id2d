// generated by Fast Light User Interface Designer (fluid) version 1.0107

#include "i_current-2.h"
#include <stdio.h>
#include <string.h>
#include "material_database.h"
#include "i_current_private.h"
#include "button_callbacks.h"

Fl_Double_Window *main_panel=(Fl_Double_Window *)0;

Fl_Progress *ProgBar=(Fl_Progress *)0;

static void cb_Quit(Fl_Menu_*, void*) {
  exit(0);
}

static void cb_Configure(Fl_Menu_*, void*) {
  config_window->show();
}

static void cb_About(Fl_Menu_*, void*) {
  about_window->show();
}

Fl_Menu_Item menu_[] = {
 {"File", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"&Quit", 0x40071,  (Fl_Callback*)cb_Quit, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Options", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Configure", 0,  (Fl_Callback*)cb_Configure, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Help", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"About", 0,  (Fl_Callback*)cb_About, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Group *group_input=(Fl_Group *)0;

Fl_Group *input_panel=(Fl_Group *)0;

Fl_Box *box_source=(Fl_Box *)0;

Fl_Box *box_sink=(Fl_Box *)0;

Fl_Box *box_substrate=(Fl_Box *)0;

Fl_Box *box_material1=(Fl_Box *)0;

Fl_Box *box_material2=(Fl_Box *)0;

Fl_Box *box_material3=(Fl_Box *)0;

Fl_Box *box_material4=(Fl_Box *)0;

Fl_Button *btn_open_image=(Fl_Button *)0;

static void cb_btn_open_image(Fl_Button*, void*) {
  fc_btn_open_image();
}

Fl_Button *btn_check=(Fl_Button *)0;

static void cb_btn_check(Fl_Button*, void*) {
  fc_btn_check();
}

Fl_Button *btn_open_cfg=(Fl_Button *)0;

static void cb_btn_open_cfg(Fl_Button*, void*) {
  fc_btn_open_cfg();
}

Fl_Button *btn_save_cfg=(Fl_Button *)0;

static void cb_btn_save_cfg(Fl_Button*, void*) {
  fc_btn_save_cfg();
}

static void cb_Edit(Fl_Button*, void*) {
  source_edit_window->show();
}

Fl_Button *pick_source=(Fl_Button *)0;

static void cb_pick_source(Fl_Button* o, void*) {
  if ( o->value()== 0 ) {
copper_plane_s->mode(FL_IMAGE_CLICK);
clear_picks();o->value(1);
}
else {
copper_plane_s->mode(FL_IMAGE_PAN);
clear_picks();
};
}

static void cb_Edit1(Fl_Button*, void*) {
  sink_edit_window->show();
}

Fl_Button *pick_sink=(Fl_Button *)0;

static void cb_pick_sink(Fl_Button* o, void*) {
  if ( o->value()== 0 ) {
copper_plane_s->mode(FL_IMAGE_CLICK);
clear_picks();o->value(1);
}
else {
copper_plane_s->mode(FL_IMAGE_PAN);
clear_picks();
};
}

static void cb_Edit2(Fl_Button*, void*) {
  substrate_edit_window->show();
}

Fl_Button *pick_substr=(Fl_Button *)0;

static void cb_pick_substr(Fl_Button* o, void*) {
  if ( o->value()== 0 ) {
copper_plane_s->mode(FL_IMAGE_CLICK);
clear_picks();o->value(1);
}
else {
copper_plane_s->mode(FL_IMAGE_PAN);
clear_picks();
};
}

static void cb_Edit3(Fl_Button*, void*) {
  material1_edit_window->show();
}

Fl_Button *pick_material1=(Fl_Button *)0;

static void cb_pick_material1(Fl_Button* o, void*) {
  if ( o->value()== 0 ) {
copper_plane_s->mode(FL_IMAGE_CLICK);
clear_picks();o->value(1);
}
else {
copper_plane_s->mode(FL_IMAGE_PAN);
clear_picks();
};
}

Fl_Choice *choice_material_1=(Fl_Choice *)0;

static void cb_choice_material_1(Fl_Choice* o, void*) {
  cb_metal_chosen((Fl_Choice*)o);
}

static void cb_Edit4(Fl_Button*, void*) {
  additional_edit_window->show();
}

Fl_Button *pick_material2=(Fl_Button *)0;

static void cb_pick_material2(Fl_Button* o, void*) {
  if ( o->value()== 0 ) {
copper_plane_s->mode(FL_IMAGE_CLICK);
clear_picks();o->value(1);
}
else {
copper_plane_s->mode(FL_IMAGE_PAN);
clear_picks();
};
}

Fl_Button *pick_material3=(Fl_Button *)0;

static void cb_pick_material3(Fl_Button* o, void*) {
  if ( o->value()== 0 ) {
copper_plane_s->mode(FL_IMAGE_CLICK);
clear_picks();o->value(1);
}
else {
copper_plane_s->mode(FL_IMAGE_PAN);
clear_picks();
};
}

Fl_Button *pick_material4=(Fl_Button *)0;

static void cb_pick_material4(Fl_Button* o, void*) {
  if ( o->value()== 0 ) {
copper_plane_s->mode(FL_IMAGE_CLICK);
clear_picks();o->value(1);
}
else {
copper_plane_s->mode(FL_IMAGE_PAN);
clear_picks();
};
}

Fl_Image_Display *copper_plane_s=(Fl_Image_Display *)0;

static void cb_copper_plane_s(Fl_Image_Display* o, void*) {
  cb_capture_color(o);
}

Fl_Group *group_analyze=(Fl_Group *)0;

Fl_Button *btn_analyze=(Fl_Button *)0;

static void cb_btn_analyze(Fl_Button*, void*) {
  fc_btn_analyze();
}

Fl_Button *btn_show=(Fl_Button *)0;

static void cb_btn_show(Fl_Button*, void*) {
  fc_btn_show();
}

Fl_Value_Input *pixel_x_umeters=(Fl_Value_Input *)0;

static void cb_pixel_x_umeters(Fl_Value_Input* o, void*) {
  pixel_y_umeters->value(o->value());
// copy x to y for default square;
}

Fl_Choice *choice_cu_thickness=(Fl_Choice *)0;

Fl_Spinner *spinner_threads=(Fl_Spinner *)0;

Fl_Button *btn_save_log=(Fl_Button *)0;

static void cb_btn_save_log(Fl_Button*, void*) {
  fc_btn_save_log();
}

Fl_Button *btn_qsave_log=(Fl_Button *)0;

static void cb_btn_qsave_log(Fl_Button*, void*) {
  fc_btn_qsave_log();
}

Fl_Value_Input *source_voltage=(Fl_Value_Input *)0;

Fl_Value_Output *initial_temp_out=(Fl_Value_Output *)0;

static void cb_initial_temp_out(Fl_Value_Output* o, void*) {
  initial_temp->value(o->value());
}

Fl_Dial *initial_temp=(Fl_Dial *)0;

static void cb_initial_temp(Fl_Dial* o, void*) {
  initial_temp_out->value(o->value());
}

Fl_Browser *main_log=(Fl_Browser *)0;

Fl_Group *group_output=(Fl_Group *)0;

Fl_Choice *choice_colormap=(Fl_Choice *)0;

static void cb_choice_colormap(Fl_Choice*, void*) {
  fc_choice_colormap();
}

Fl_Menu_Item menu_choice_colormap[] = {
 {"Default", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Gray", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Jet", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Hot", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Cold", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Choice *choice_show=(Fl_Choice *)0;

static void cb_choice_show(Fl_Choice*, void*) {
  fc_choice_show();
}

Fl_Menu_Item menu_choice_show[] = {
 {"Current density", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Current density X", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Current density Y", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Current X vs Y", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Voltage", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Button *btn_save_image=(Fl_Button *)0;

static void cb_btn_save_image(Fl_Button*, void*) {
  fc_btn_save_image();
}

Fl_Button *btn_save_data=(Fl_Button *)0;

static void cb_btn_save_data(Fl_Button*, void*) {
  fc_btn_save_data();
}

Fl_Value_Output *out_R=(Fl_Value_Output *)0;

Fl_Value_Output *out_G=(Fl_Value_Output *)0;

Fl_Value_Output *out_B=(Fl_Value_Output *)0;

Fl_Value_Output *out_I=(Fl_Value_Output *)0;

Fl_Value_Output *out_Ix=(Fl_Value_Output *)0;

Fl_Value_Output *out_Iy=(Fl_Value_Output *)0;

Fl_Value_Output *out_V=(Fl_Value_Output *)0;

Fl_Image_Display *current_density_plot_s=(Fl_Image_Display *)0;

Fl_Double_Window* make_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = main_panel = new Fl_Double_Window(880, 649, "Copper Plane Current Analysis");
    w = o;
    o->when(FL_WHEN_NEVER);
    { Fl_Progress* o = ProgBar = new Fl_Progress(514, 29, 210, 20, "Activity");
      o->align(FL_ALIGN_LEFT);
    }
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(0, 0, 880, 24);
      o->labeltype(FL_NO_LABEL);
      o->align(FL_ALIGN_TOP_LEFT);
      o->menu(menu_);
    }
    { Fl_Tabs* o = new Fl_Tabs(5, 30, 870, 610);
      o->box(FL_UP_BOX);
      o->align(FL_ALIGN_CENTER);
      { Fl_Group* o = group_input = new Fl_Group(5, 55, 870, 585, "Input");
        { Fl_Group* o = input_panel = new Fl_Group(705, 70, 170, 560);
          { Fl_Box* o = box_source = new Fl_Box(725, 202, 120, 35, "Current Source");
            o->box(FL_UP_BOX);
            o->color((Fl_Color)2);
            o->align(FL_ALIGN_TOP_LEFT);
          }
          { Fl_Box* o = box_sink = new Fl_Box(725, 257, 120, 35, "Current Sink");
            o->box(FL_UP_BOX);
            o->color((Fl_Color)4);
            o->align(FL_ALIGN_TOP_LEFT);
          }
          { Fl_Box* o = box_substrate = new Fl_Box(725, 312, 120, 35, "Substrate");
            o->box(FL_UP_BOX);
            o->color(FL_FOREGROUND_COLOR);
            o->align(FL_ALIGN_TOP_LEFT);
          }
          { Fl_Box* o = box_material1 = new Fl_Box(725, 392, 120, 35);
            o->box(FL_UP_BOX);
            o->color((Fl_Color)1);
            o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
          }
          { Fl_Box* o = box_material2 = new Fl_Box(725, 451, 65, 23, "Material 2");
            o->tooltip("Undefined");
            o->box(FL_UP_BOX);
            o->color((Fl_Color)53);
            o->selection_color(FL_FOREGROUND_COLOR);
            o->align(FL_ALIGN_TOP_LEFT);
          }
          { Fl_Box* o = box_material3 = new Fl_Box(725, 489, 65, 25, "Material 3");
            o->tooltip("Undefined");
            o->box(FL_UP_BOX);
            o->color((Fl_Color)53);
            o->selection_color(FL_FOREGROUND_COLOR);
            o->align(FL_ALIGN_TOP_LEFT);
          }
          { Fl_Box* o = box_material4 = new Fl_Box(725, 530, 65, 28, "Material 4");
            o->tooltip("Undefined");
            o->box(FL_UP_BOX);
            o->color((Fl_Color)33);
            o->align(FL_ALIGN_TOP_LEFT);
          }
          { Fl_Button* o = btn_open_image = new Fl_Button(720, 71, 95, 24, "&Open image");
            o->shortcut(0x4006f);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_btn_open_image);
          }
          { Fl_Button* o = btn_check = new Fl_Button(720, 106, 95, 23, "Chec&k");
            o->shortcut(0x4006b);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_btn_check);
            o->deactivate();
          }
          { Fl_Button* o = btn_open_cfg = new Fl_Button(715, 575, 130, 24, "Open configuration");
            o->tooltip("Reads bitmap (.BMP) file.");
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_btn_open_cfg);
          }
          { Fl_Button* o = btn_save_cfg = new Fl_Button(715, 605, 130, 24, "Save configuration");
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_btn_save_cfg);
          }
          { Fl_Box* o = new Fl_Box(715, 144, 140, 424, "Material-Color Definitions");
            o->box(FL_THIN_DOWN_FRAME);
            o->color(FL_GRAY0);
            o->align(133|FL_ALIGN_INSIDE);
          }
          { Fl_Button* o = new Fl_Button(790, 210, 45, 20, "Edit");
            o->callback((Fl_Callback*)cb_Edit);
            o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
          }
          { Fl_Button* o = pick_source = new Fl_Button(735, 210, 45, 20, "Pick");
            o->color((Fl_Color)53);
            o->selection_color(FL_FOREGROUND_COLOR);
            o->callback((Fl_Callback*)cb_pick_source);
            o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
          }
          { Fl_Button* o = new Fl_Button(790, 265, 45, 20, "Edit");
            o->callback((Fl_Callback*)cb_Edit1);
            o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
          }
          { Fl_Button* o = pick_sink = new Fl_Button(735, 265, 45, 20, "Pick");
            o->color((Fl_Color)53);
            o->selection_color(FL_GRAY0);
            o->callback((Fl_Callback*)cb_pick_sink);
            o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
          }
          { Fl_Button* o = new Fl_Button(790, 320, 45, 20, "Edit");
            o->callback((Fl_Callback*)cb_Edit2);
            o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
          }
          { Fl_Button* o = pick_substr = new Fl_Button(735, 320, 45, 20, "Pick");
            o->color((Fl_Color)53);
            o->selection_color(FL_GRAY0);
            o->callback((Fl_Callback*)cb_pick_substr);
            o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
          }
          { Fl_Button* o = new Fl_Button(790, 400, 45, 20, "Edit");
            o->callback((Fl_Callback*)cb_Edit3);
            o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
          }
          { Fl_Button* o = pick_material1 = new Fl_Button(735, 400, 45, 20, "Pick");
            o->selection_color(FL_FOREGROUND_COLOR);
            o->callback((Fl_Callback*)cb_pick_material1);
            o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
          }
          { Fl_Choice* o = choice_material_1 = new Fl_Choice(725, 370, 120, 20, "Material");
            o->down_box(FL_BORDER_BOX);
            o->callback((Fl_Callback*)cb_choice_material_1);
            o->align(FL_ALIGN_TOP_LEFT);
            o->menu(menu_choice_material);
            o->value(5); // Index into copper
          }
          { Fl_Button* o = new Fl_Button(799, 490, 40, 23, "Edit");
            o->callback((Fl_Callback*)cb_Edit4);
            o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
          }
          { Fl_Button* o = pick_material2 = new Fl_Button(740, 455, 35, 15, "Pick");
            o->box(FL_THIN_UP_BOX);
            o->color((Fl_Color)53);
            o->selection_color(FL_FOREGROUND_COLOR);
            o->labelsize(11);
            o->callback((Fl_Callback*)cb_pick_material2);
            o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
          }
          { Fl_Button* o = pick_material3 = new Fl_Button(740, 494, 35, 15, "Pick");
            o->box(FL_THIN_UP_BOX);
            o->color((Fl_Color)53);
            o->selection_color(FL_FOREGROUND_COLOR);
            o->labelsize(11);
            o->callback((Fl_Callback*)cb_pick_material3);
            o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
          }
          { Fl_Button* o = pick_material4 = new Fl_Button(740, 537, 35, 15, "Pick");
            o->box(FL_THIN_UP_BOX);
            o->color((Fl_Color)53);
            o->selection_color(FL_FOREGROUND_COLOR);
            o->labelsize(11);
            o->callback((Fl_Callback*)cb_pick_material4);
            o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
          }
          o->end();
        }
        { Fl_Image_Display* o = copper_plane_s = new Fl_Image_Display(15, 70, 685, 560);
          o->box(FL_DOWN_BOX);
          o->color(FL_BACKGROUND_COLOR);
          o->selection_color(FL_BACKGROUND_COLOR);
          o->labeltype(FL_NORMAL_LABEL);
          o->labelfont(0);
          o->labelsize(14);
          o->labelcolor(FL_FOREGROUND_COLOR);
          o->callback((Fl_Callback*)cb_copper_plane_s);
          o->align(FL_ALIGN_TOP);
          o->when(FL_WHEN_RELEASE);
          o->end();
          Fl_Group::current()->resizable(o);
        }
        o->end();
      }
      { Fl_Group* o = group_analyze = new Fl_Group(5, 55, 870, 585, "Analyze");
        o->hide();
        { Fl_Group* o = new Fl_Group(740, 70, 120, 560);
          { Fl_Button* o = btn_analyze = new Fl_Button(740, 85, 120, 24, "A&nalyze");
            o->shortcut(0x4006e);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_btn_analyze);
            o->deactivate();
          }
          { Fl_Button* o = btn_show = new Fl_Button(740, 129, 120, 24, "Sho&w");
            o->shortcut(0x40077);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_btn_show);
            o->deactivate();
          }
          { Fl_Value_Input* o = pixel_x_umeters = new Fl_Value_Input(740, 196, 65, 24, "Pixel dimension (um)");
            o->tooltip("Not needed for resistance only.");
            o->labelsize(12);
            o->maximum(10000);
            o->step(0.01);
            o->value(10);
            o->callback((Fl_Callback*)cb_pixel_x_umeters);
            o->align(FL_ALIGN_TOP_LEFT);
          }
          { Fl_Choice* o = choice_cu_thickness = new Fl_Choice(740, 244, 120, 24, "Layer thickness");
            o->box(FL_THIN_UP_BOX);
            o->down_box(FL_BORDER_BOX);
            o->labelsize(12);
            o->textsize(12);
            o->align(FL_ALIGN_TOP_LEFT);
            o->menu(menu_choice_cu_thickness);
          }
          { Fl_Spinner* o = spinner_threads = new Fl_Spinner(800, 282, 60, 24, "Threads");
            o->labelsize(12);
            o->textfont(4);
            o->textsize(12);
          }
          { Fl_Button* o = btn_save_log = new Fl_Button(740, 319, 120, 24, "Save log");
            o->shortcut(0x8006c);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_btn_save_log);
          }
          { Fl_Button* o = btn_qsave_log = new Fl_Button(740, 356, 120, 24, "Quick Save log");
            o->shortcut(0x8006c);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_btn_qsave_log);
          }
          { Fl_Box* o = new Fl_Box(740, 505, 120, 125);
            o->labeltype(FL_NO_LABEL);
            Fl_Group::current()->resizable(o);
          }
          { Fl_Value_Input* o = source_voltage = new Fl_Value_Input(775, 411, 50, 24, "Source Voltage");
            o->step(0.01);
            o->value(0.1);
            o->align(FL_ALIGN_TOP);
          }
          { Fl_Value_Output* o = initial_temp_out = new Fl_Value_Output(780, 566, 45, 24, "Deg. C");
            o->minimum(-50);
            o->maximum(200);
            o->step(0.1);
            o->value(20);
            o->callback((Fl_Callback*)cb_initial_temp_out);
            o->align(FL_ALIGN_TOP_LEFT);
          }
          { Fl_Dial* o = initial_temp = new Fl_Dial(765, 470, 70, 70, "Temperature");
            o->type(1);
            o->minimum(-50);
            o->maximum(200);
            o->step(1);
            o->value(20);
            o->callback((Fl_Callback*)cb_initial_temp);
            o->align(FL_ALIGN_TOP);
          }
          { Fl_Box* o = new Fl_Box(815, 199, 30, 16, "optional");
            o->labelsize(10);
          }
          o->end();
        }
        { Fl_Browser* o = main_log = new Fl_Browser(15, 80, 715, 550, "Computation Log");
          o->type(3);
          o->labelsize(12);
          o->textfont(4);
          o->textsize(12);
          o->align(FL_ALIGN_TOP_LEFT);
          Fl_Group::current()->resizable(o);
        }
        o->end();
      }
      { Fl_Group* o = group_output = new Fl_Group(5, 55, 870, 585, "Output");
        o->hide();
        o->deactivate();
        { Fl_Group* o = new Fl_Group(740, 70, 125, 560);
          { Fl_Choice* o = choice_colormap = new Fl_Choice(740, 95, 120, 24, "Colormap");
            o->down_box(FL_BORDER_BOX);
            o->labelsize(12);
            o->textsize(12);
            o->callback((Fl_Callback*)cb_choice_colormap);
            o->align(FL_ALIGN_TOP_LEFT);
            o->menu(menu_choice_colormap);
          }
          { Fl_Choice* o = choice_show = new Fl_Choice(740, 135, 120, 24, "Show");
            o->down_box(FL_BORDER_BOX);
            o->labelsize(12);
            o->textsize(12);
            o->callback((Fl_Callback*)cb_choice_show);
            o->align(FL_ALIGN_TOP_LEFT);
            o->menu(menu_choice_show);
          }
          { Fl_Button* o = btn_save_image = new Fl_Button(740, 210, 120, 24, "&Save image");
            o->tooltip("Save current image");
            o->shortcut(0x40073);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_btn_save_image);
          }
          { Fl_Button* o = btn_save_data = new Fl_Button(740, 240, 120, 24, "Save &data");
            o->shortcut(0x40064);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_btn_save_data);
          }
          { Fl_Value_Output* o = out_R = new Fl_Value_Output(740, 295, 33, 24, "R");
            o->labelsize(12);
            o->labelcolor((Fl_Color)1);
            o->maximum(0);
            o->textfont(4);
            o->textsize(12);
            o->textcolor(1);
            o->align(FL_ALIGN_TOP);
          }
          { Fl_Value_Output* o = out_G = new Fl_Value_Output(780, 295, 33, 24, "G");
            o->labelsize(12);
            o->labelcolor((Fl_Color)2);
            o->maximum(0);
            o->textfont(4);
            o->textsize(12);
            o->textcolor(2);
            o->align(FL_ALIGN_TOP);
          }
          { Fl_Value_Output* o = out_B = new Fl_Value_Output(820, 295, 33, 24, "B");
            o->labelsize(12);
            o->labelcolor((Fl_Color)4);
            o->maximum(0);
            o->textfont(4);
            o->textsize(12);
            o->textcolor(4);
            o->align(FL_ALIGN_TOP);
          }
          { Fl_Value_Output* o = out_I = new Fl_Value_Output(740, 345, 105, 24, "Total pixel current [A]");
            o->tooltip("Total pixel current");
            o->labelsize(12);
            o->maximum(0);
            o->textfont(4);
            o->textsize(12);
            o->align(FL_ALIGN_TOP_LEFT);
          }
          { Fl_Value_Output* o = out_Ix = new Fl_Value_Output(740, 385, 105, 24, "X pixel current [A]");
            o->tooltip("Horizontal pixel current");
            o->labelsize(12);
            o->labelcolor((Fl_Color)59);
            o->maximum(0);
            o->textfont(4);
            o->textsize(12);
            o->align(FL_ALIGN_TOP_LEFT);
          }
          { Fl_Value_Output* o = out_Iy = new Fl_Value_Output(740, 425, 105, 24, "Y pixel current [A]");
            o->tooltip("Vertical pixel current");
            o->labelsize(12);
            o->labelcolor((Fl_Color)1);
            o->maximum(0);
            o->textfont(4);
            o->textsize(12);
            o->align(FL_ALIGN_TOP_LEFT);
          }
          { Fl_Box* o = new Fl_Box(740, 500, 120, 130);
            o->labeltype(FL_NO_LABEL);
            Fl_Group::current()->resizable(o);
          }
          { Fl_Value_Output* o = out_V = new Fl_Value_Output(740, 465, 105, 24, "Pixel voltage [V]");
            o->tooltip("Pixel voltage");
            o->labelsize(12);
            o->maximum(0);
            o->textfont(4);
            o->textsize(12);
            o->align(FL_ALIGN_TOP_LEFT);
          }
          o->end();
        }
        { Fl_Image_Display* o = current_density_plot_s = new Fl_Image_Display(15, 70, 715, 560);
          o->box(FL_DOWN_BOX);
          o->color(FL_BACKGROUND_COLOR);
          o->selection_color(FL_BACKGROUND_COLOR);
          o->labeltype(FL_NORMAL_LABEL);
          o->labelfont(0);
          o->labelsize(14);
          o->labelcolor(FL_FOREGROUND_COLOR);
          o->align(FL_ALIGN_TOP);
          o->when(FL_WHEN_RELEASE);
          o->end();
          Fl_Group::current()->resizable(o);
        }
        o->end();
      }
      o->end();
      Fl_Group::current()->resizable(o);
    }
    o->size_range(880, 645);
    o->end();
  }
  return w;
}

Fl_Box *fltk_version_box=(Fl_Box *)0;

Fl_Button *about_close=(Fl_Button *)0;

static void cb_about_close(Fl_Button* o, void*) {
  ((Fl_Window*)(o->parent()))->hide();
}

Fl_Double_Window* make_about_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(240, 349, "Plane Analysis");
    w = o;
    new Fl_Box(25, 10, 190, 25, "Copper Plane Analysis");
    new Fl_Box(25, 35, 190, 25, "Copyright 2007");
    new Fl_Box(25, 61, 190, 25, "Kirby Goulet");
    new Fl_Box(25, 86, 190, 25, "Tomislav Gotic");
    { Fl_Box* o = new Fl_Box(25, 135, 190, 25, "VER_STRING");
      o->label(VER_STRING);
    }
    { Fl_Box* o = new Fl_Box(30, 160, 180, 25, "All Rights Reserved");
      o->color((Fl_Color)55);
    }
    new Fl_Box(25, 183, 190, 25, "Uses:");
    fltk_version_box = new Fl_Box(25, 203, 190, 25);
    { Fl_Button* o = about_close = new Fl_Button(25, 238, 190, 25, "CLOSE");
      o->labelcolor(FL_GRAY0);
      o->callback((Fl_Callback*)cb_about_close);
    }
    new Fl_Box(20, 270, 185, 25, "kgoulet@@ieee.org");
    new Fl_Box(30, 293, 185, 25, "tgotic@@gmail.com");
    new Fl_Box(30, 315, 185, 25, "ljohnson@@vanteon.com");
    new Fl_Box(79, 110, 85, 25, "Louis Johnson");
    o->end();
  }
  return w;
}

Fl_Value_Input *input_max_iter=(Fl_Value_Input *)0;

Fl_Value_Input *pixel_y_umeters=(Fl_Value_Input *)0;

Fl_Value_Input *input_cutoff=(Fl_Value_Input *)0;

static void cb_Close(Fl_Button* o, void*) {
  ((Fl_Window*)(o->parent()))->hide();
}

Fl_Double_Window* make_config_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(386, 398, "Configuration Settings");
    w = o;
    { Fl_Tabs* o = new Fl_Tabs(25, 25, 340, 315);
      o->align(FL_ALIGN_BOTTOM);
      { Fl_Group* o = new Fl_Group(40, 55, 325, 270, "Panel 1");
        { Fl_Value_Input* o = input_max_iter = new Fl_Value_Input(80, 171, 120, 24, "Max. iterations");
          o->labelsize(12);
          o->minimum(1);
          o->maximum(50000);
          o->step(1);
          o->value(10000);
          o->textfont(4);
          o->textsize(12);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Value_Input* o = pixel_y_umeters = new Fl_Value_Input(175, 237, 65, 23, "Pixel y dimension");
          o->maximum(10000);
          o->step(0.01);
          o->value(10);
        }
        { Fl_Box* o = new Fl_Box(255, 238, 110, 47, "Dimensions in micrometers.  Non-square untested.");
          o->align(133|FL_ALIGN_INSIDE);
        }
        { Fl_Value_Input* o = input_cutoff = new Fl_Value_Input(80, 111, 120, 24, "Cutoff");
          o->labelsize(12);
          o->value(1e-016);
          o->textfont(4);
          o->textsize(12);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        new Fl_Box(135, 69, 30, 16, "Field Solver Accuracy Control");
        o->end();
      }
      o->end();
    }
    { Fl_Group* o = new Fl_Group(295, 174, 30, 16);
      o->end();
    }
    { Fl_Button* o = new Fl_Button(240, 360, 125, 25, "Close Panel");
      o->callback((Fl_Callback*)cb_Close);
    }
    o->set_modal();
    o->end();
  }
  return w;
}

Fl_Value_Input *r_source_d=(Fl_Value_Input *)0;

static void cb_r_source_d(Fl_Value_Input* o, void*) {
  {
uchar r,g,b;
Fl::get_color( box_source->color() ,r , g , b);
r=o->value();
box_source->color( fl_rgb_color ( r , g , b ));
sync_color2dec();
input_panel->redraw();
};
}

Fl_Output *r_source_h=(Fl_Output *)0;

Fl_Value_Input *g_source_d=(Fl_Value_Input *)0;

static void cb_g_source_d(Fl_Value_Input* o, void*) {
  {
uchar r,g,b;
Fl::get_color( box_source->color() ,r , g , b);
g=o->value();
box_source->color( fl_rgb_color ( r , g , b ));
sync_color2dec();
input_panel->redraw();
};
}

Fl_Output *g_source_h=(Fl_Output *)0;

Fl_Value_Input *b_source_d=(Fl_Value_Input *)0;

static void cb_b_source_d(Fl_Value_Input* o, void*) {
  {
uchar r,g,b;
Fl::get_color( box_source->color() ,r , g , b);
b=o->value();
box_source->color( fl_rgb_color ( r , g , b ));
sync_color2dec();
input_panel->redraw();
};
}

Fl_Output *b_source_h=(Fl_Output *)0;

Fl_Double_Window* make_edit_source_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(209, 185, "Source Color");
    w = o;
    new Fl_Box(30, 13, 140, 27, "Current Source Definition");
    { Fl_Value_Input* o = r_source_d = new Fl_Value_Input(45, 81, 40, 24, "RED");
      o->labelsize(12);
      o->maximum(255);
      o->step(1);
      o->callback((Fl_Callback*)cb_r_source_d);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Output* o = r_source_h = new Fl_Output(45, 111, 40, 24);
      o->align(FL_ALIGN_CENTER);
    }
    new Fl_Box(5, 80, 40, 27, "Dec");
    new Fl_Box(5, 109, 40, 27, "Hex");
    { Fl_Value_Input* o = g_source_d = new Fl_Value_Input(90, 81, 40, 24, "GREEN");
      o->labelsize(12);
      o->maximum(255);
      o->step(1);
      o->value(255);
      o->callback((Fl_Callback*)cb_g_source_d);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Output* o = g_source_h = new Fl_Output(90, 111, 40, 24);
      o->align(FL_ALIGN_CENTER);
    }
    { Fl_Value_Input* o = b_source_d = new Fl_Value_Input(135, 81, 40, 24, "BLUE");
      o->labelsize(12);
      o->maximum(255);
      o->step(1);
      o->callback((Fl_Callback*)cb_b_source_d);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Output* o = b_source_h = new Fl_Output(135, 111, 40, 24);
      o->align(FL_ALIGN_CENTER);
    }
    o->set_non_modal();
    o->end();
  }
  return w;
}

Fl_Value_Input *r_sink_d=(Fl_Value_Input *)0;

static void cb_r_sink_d(Fl_Value_Input* o, void*) {
  {
uchar r,g,b;
Fl::get_color( box_sink->color() ,r , g , b);
r=o->value();
box_sink->color( fl_rgb_color ( r , g , b ));
sync_color2dec();
input_panel->redraw();
};
}

Fl_Output *r_sink_h=(Fl_Output *)0;

Fl_Value_Input *g_sink_d=(Fl_Value_Input *)0;

static void cb_g_sink_d(Fl_Value_Input* o, void*) {
  {
uchar r,g,b;
Fl::get_color( box_sink->color() ,r , g , b);
g=o->value();
box_sink->color( fl_rgb_color ( r , g , b ));
sync_color2dec();
input_panel->redraw();
};
}

Fl_Output *g_sink_h=(Fl_Output *)0;

Fl_Value_Input *b_sink_d=(Fl_Value_Input *)0;

static void cb_b_sink_d(Fl_Value_Input* o, void*) {
  {
uchar r,g,b;
Fl::get_color( box_sink->color() ,r , g , b);
b=o->value();
box_sink->color( fl_rgb_color ( r , g , b ));
sync_color2dec();
input_panel->redraw();
};
}

Fl_Output *b_sink_h=(Fl_Output *)0;

Fl_Double_Window* make_edit_sink_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(209, 208, "Sink Color");
    w = o;
    new Fl_Box(30, 13, 140, 27, "Current Sink Definition");
    { Fl_Value_Input* o = r_sink_d = new Fl_Value_Input(50, 86, 40, 24, "RED");
      o->labelsize(12);
      o->maximum(255);
      o->step(1);
      o->callback((Fl_Callback*)cb_r_sink_d);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Output* o = r_sink_h = new Fl_Output(50, 116, 40, 24);
      o->align(FL_ALIGN_CENTER);
    }
    new Fl_Box(5, 85, 40, 27, "Dec");
    new Fl_Box(5, 115, 40, 27, "Hex");
    { Fl_Value_Input* o = g_sink_d = new Fl_Value_Input(95, 86, 40, 24, "GREEN");
      o->labelsize(12);
      o->maximum(255);
      o->step(1);
      o->callback((Fl_Callback*)cb_g_sink_d);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Output* o = g_sink_h = new Fl_Output(95, 116, 40, 24);
      o->align(FL_ALIGN_CENTER);
    }
    { Fl_Value_Input* o = b_sink_d = new Fl_Value_Input(140, 86, 40, 24, "BLUE");
      o->labelsize(12);
      o->maximum(255);
      o->step(1);
      o->value(255);
      o->callback((Fl_Callback*)cb_b_sink_d);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Output* o = b_sink_h = new Fl_Output(140, 116, 40, 24);
      o->align(FL_ALIGN_CENTER);
    }
    o->set_non_modal();
    o->end();
  }
  return w;
}

Fl_Value_Input *r_substrate_d=(Fl_Value_Input *)0;

static void cb_r_substrate_d(Fl_Value_Input* o, void*) {
  {
uchar r,g,b;
Fl::get_color( box_substrate->color() ,r , g , b);
r=o->value();
box_substrate->color( fl_rgb_color ( r , g , b ));
sync_color2dec();
input_panel->redraw();
};
}

Fl_Output *r_substrate_h=(Fl_Output *)0;

Fl_Value_Input *g_substrate_d=(Fl_Value_Input *)0;

static void cb_g_substrate_d(Fl_Value_Input* o, void*) {
  {
uchar r,g,b;
Fl::get_color( box_substrate->color() ,r , g , b);
g=o->value();
box_substrate->color( fl_rgb_color ( r , g , b ));
sync_color2dec();
input_panel->redraw();
};
}

Fl_Output *g_substrate_h=(Fl_Output *)0;

Fl_Value_Input *b_substrate_d=(Fl_Value_Input *)0;

static void cb_b_substrate_d(Fl_Value_Input* o, void*) {
  {
uchar r,g,b;
Fl::get_color( box_substrate->color() ,r , g , b);
b=o->value();
box_substrate->color( fl_rgb_color ( r , g , b ));
sync_color2dec();
input_panel->redraw();
};
}

Fl_Output *b_substrate_h=(Fl_Output *)0;

Fl_Double_Window* make_edit_substr_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(209, 221, "Substrate Color");
    w = o;
    new Fl_Box(30, 13, 140, 27, "Substrate Definition");
    { Fl_Value_Input* o = r_substrate_d = new Fl_Value_Input(56, 81, 40, 24, "RED");
      o->labelsize(12);
      o->maximum(255);
      o->step(1);
      o->callback((Fl_Callback*)cb_r_substrate_d);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Output* o = r_substrate_h = new Fl_Output(56, 111, 40, 24);
      o->align(FL_ALIGN_CENTER);
    }
    new Fl_Box(16, 81, 40, 27, "Dec");
    new Fl_Box(16, 110, 40, 27, "Hex");
    { Fl_Value_Input* o = g_substrate_d = new Fl_Value_Input(101, 81, 40, 24, "GREEN");
      o->labelsize(12);
      o->maximum(255);
      o->step(1);
      o->callback((Fl_Callback*)cb_g_substrate_d);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Output* o = g_substrate_h = new Fl_Output(101, 111, 40, 24);
      o->align(FL_ALIGN_CENTER);
    }
    { Fl_Value_Input* o = b_substrate_d = new Fl_Value_Input(146, 81, 40, 24, "BLUE");
      o->labelsize(12);
      o->maximum(255);
      o->step(1);
      o->callback((Fl_Callback*)cb_b_substrate_d);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Output* o = b_substrate_h = new Fl_Output(146, 111, 40, 24);
      o->align(FL_ALIGN_CENTER);
    }
    o->set_non_modal();
    o->end();
  }
  return w;
}

Fl_Double_Window *panel_material1=(Fl_Double_Window *)0;

Fl_Value_Input *r_material1_d=(Fl_Value_Input *)0;

static void cb_r_material1_d(Fl_Value_Input* o, void*) {
  {
uchar r,g,b;
Fl::get_color( box_material1->color() ,r , g , b);
r=o->value();
box_material1->color( fl_rgb_color ( r , g , b ));
sync_color2dec();
input_panel->redraw();
};
}

Fl_Output *r_material1_h=(Fl_Output *)0;

Fl_Value_Input *g_material1_d=(Fl_Value_Input *)0;

static void cb_g_material1_d(Fl_Value_Input* o, void*) {
  {
uchar r,g,b;
Fl::get_color( box_material1->color() ,r , g , b);
g=o->value();
box_material1->color( fl_rgb_color ( r , g , b ));
sync_color2dec();
input_panel->redraw();
};
}

Fl_Output *g_material1_h=(Fl_Output *)0;

Fl_Value_Input *b_material1_d=(Fl_Value_Input *)0;

static void cb_b_material1_d(Fl_Value_Input* o, void*) {
  {
uchar r,g,b;
Fl::get_color( box_material1->color() ,r , g , b);
b=o->value();
box_material1->color( fl_rgb_color ( r , g , b ));
sync_color2dec();
input_panel->redraw();
};
}

Fl_Output *b_material1_h=(Fl_Output *)0;

Fl_Value_Input *conductance_m1=(Fl_Value_Input *)0;

static void cb_conductance_m1(Fl_Value_Input* o, void*) {
  cb_conductance_m1_changed( (Fl_Value_Input*)o);
}

Fl_Double_Window* make_edit_m1_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = panel_material1 = new Fl_Double_Window(209, 202, "Material 1 Definition");
    w = o;
    new Fl_Box(30, 13, 140, 27, "Material 1 Definition");
    { Fl_Value_Input* o = r_material1_d = new Fl_Value_Input(50, 71, 40, 24, "RED");
      o->labelsize(12);
      o->maximum(255);
      o->step(1);
      o->callback((Fl_Callback*)cb_r_material1_d);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Output* o = r_material1_h = new Fl_Output(50, 101, 40, 24);
      o->align(FL_ALIGN_CENTER);
    }
    new Fl_Box(5, 70, 40, 27, "Dec");
    new Fl_Box(5, 99, 40, 27, "Hex");
    { Fl_Value_Input* o = g_material1_d = new Fl_Value_Input(100, 71, 40, 24, "GREEN");
      o->labelsize(12);
      o->maximum(255);
      o->step(1);
      o->callback((Fl_Callback*)cb_g_material1_d);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Output* o = g_material1_h = new Fl_Output(100, 101, 40, 24);
      o->align(FL_ALIGN_CENTER);
    }
    { Fl_Value_Input* o = b_material1_d = new Fl_Value_Input(150, 71, 40, 24, "BLUE");
      o->labelsize(12);
      o->maximum(255);
      o->step(1);
      o->callback((Fl_Callback*)cb_b_material1_d);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Output* o = b_material1_h = new Fl_Output(150, 101, 40, 24);
      o->align(FL_ALIGN_CENTER);
    }
    { Fl_Value_Input* o = conductance_m1 = new Fl_Value_Input(105, 146, 70, 24, "Conductivity");
      o->callback((Fl_Callback*)cb_conductance_m1);
    }
    new Fl_Box(105, 170, 50, 21, "MS/m");
    o->set_non_modal();
    o->end();
  }
  return w;
}

Fl_Value_Input *r_material4_d=(Fl_Value_Input *)0;

static void cb_r_material4_d(Fl_Value_Input* o, void*) {
  {
uchar r,g,b;
Fl::get_color( box_material4->color() ,r , g , b);
r=o->value();
box_material4->color( fl_rgb_color ( r , g , b ));
sync_color2dec();
input_panel->redraw();
};
}

Fl_Output *r_material4_h=(Fl_Output *)0;

Fl_Value_Input *g_material4_d=(Fl_Value_Input *)0;

static void cb_g_material4_d(Fl_Value_Input* o, void*) {
  {
uchar r,g,b;
Fl::get_color( box_material4->color() ,r , g , b);
g=o->value();
box_material4->color( fl_rgb_color ( r , g , b ));
sync_color2dec();
input_panel->redraw();
};
}

Fl_Output *g_material4_h=(Fl_Output *)0;

Fl_Value_Input *b_material4_d=(Fl_Value_Input *)0;

static void cb_b_material4_d(Fl_Value_Input* o, void*) {
  {
uchar r,g,b;
Fl::get_color( box_material4->color() ,r , g , b);
b=o->value();
box_material4->color( fl_rgb_color ( r , g , b ));
sync_color2dec();
input_panel->redraw();
};
}

Fl_Output *b_material4_h=(Fl_Output *)0;

Fl_Value_Input *conductance_m4=(Fl_Value_Input *)0;

static void cb_conductance_m4(Fl_Value_Input* o, void*) {
  cb_conductance_m4_changed( (Fl_Value_Input*)o);
}

Fl_Value_Input *r_material3_d=(Fl_Value_Input *)0;

static void cb_r_material3_d(Fl_Value_Input* o, void*) {
  {
uchar r,g,b;
Fl::get_color( box_material3->color() ,r , g , b);
r=o->value();
box_material3->color( fl_rgb_color ( r , g , b ));
sync_color2dec();
input_panel->redraw();
};
}

Fl_Output *r_material3_h=(Fl_Output *)0;

Fl_Value_Input *g_material3_d=(Fl_Value_Input *)0;

static void cb_g_material3_d(Fl_Value_Input* o, void*) {
  {
uchar r,g,b;
Fl::get_color( box_material3->color() ,r , g , b);
g=o->value();
box_material3->color( fl_rgb_color ( r , g , b ));
sync_color2dec();
input_panel->redraw();
};
}

Fl_Output *g_material3_h=(Fl_Output *)0;

Fl_Value_Input *b_material3_d=(Fl_Value_Input *)0;

static void cb_b_material3_d(Fl_Value_Input* o, void*) {
  {
uchar r,g,b;
Fl::get_color( box_material3->color() ,r , g , b);
b=o->value();
box_material3->color( fl_rgb_color ( r , g , b ));
sync_color2dec();
input_panel->redraw();
};
}

Fl_Output *b_material3_h=(Fl_Output *)0;

Fl_Value_Input *conductance_m3=(Fl_Value_Input *)0;

static void cb_conductance_m3(Fl_Value_Input* o, void*) {
  cb_conductance_m3_changed( (Fl_Value_Input*)o);
}

Fl_Value_Input *r_material2_d=(Fl_Value_Input *)0;

static void cb_r_material2_d(Fl_Value_Input* o, void*) {
  {
uchar r,g,b;
Fl::get_color( box_material2->color() ,r , g , b);
r=o->value();
box_material2->color( fl_rgb_color ( r , g , b ));
sync_color2dec();
input_panel->redraw();
};
}

Fl_Output *r_material2_h=(Fl_Output *)0;

Fl_Value_Input *g_material2_d=(Fl_Value_Input *)0;

static void cb_g_material2_d(Fl_Value_Input* o, void*) {
  {
uchar r,g,b;
Fl::get_color( box_material2->color() ,r , g , b);
g=o->value();
box_material2->color( fl_rgb_color ( r , g , b ));
sync_color2dec();
input_panel->redraw();
};
}

Fl_Output *g_material2_h=(Fl_Output *)0;

Fl_Value_Input *b_material2_d=(Fl_Value_Input *)0;

static void cb_b_material2_d(Fl_Value_Input* o, void*) {
  {
uchar r,g,b;
Fl::get_color( box_material2->color() ,r , g , b);
b=o->value();
box_material2->color( fl_rgb_color ( r , g , b ));
sync_color2dec();
input_panel->redraw();
};
}

Fl_Output *b_material2_h=(Fl_Output *)0;

Fl_Value_Input *conductance_m2=(Fl_Value_Input *)0;

static void cb_conductance_m2(Fl_Value_Input* o, void*) {
  cb_conductance_m2_changed( (Fl_Value_Input*)o);
}

static void cb_Close1(Fl_Button*, void*) {
  additional_edit_window->hide();
}

Fl_Choice *choice_material_4=(Fl_Choice *)0;

static void cb_choice_material_4(Fl_Choice* o, void*) {
  cb_metal_chosen((Fl_Choice*)o);
box_material4->tooltip(o->text());
}

Fl_Choice *choice_material_3=(Fl_Choice *)0;

static void cb_choice_material_3(Fl_Choice* o, void*) {
  cb_metal_chosen((Fl_Choice*)o);
box_material3->tooltip(o->text());
}

Fl_Choice *choice_material_2=(Fl_Choice *)0;

static void cb_choice_material_2(Fl_Choice* o, void*) {
  cb_metal_chosen((Fl_Choice*)o);
box_material2->tooltip(o->text());
}

Fl_Double_Window* make_edit_additional_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(213, 605, "Additional Materials");
    w = o;
    { Fl_Box* o = new Fl_Box(10, 420, 185, 144, "Material 4 Definition");
      o->box(FL_THIN_UP_FRAME);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Value_Input* o = r_material4_d = new Fl_Value_Input(51, 440, 40, 24, "RED");
      o->labelsize(12);
      o->maximum(255);
      o->step(1);
      o->callback((Fl_Callback*)cb_r_material4_d);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Output* o = r_material4_h = new Fl_Output(51, 470, 40, 24);
      o->align(FL_ALIGN_CENTER);
    }
    new Fl_Box(9, 439, 40, 27, "Dec");
    new Fl_Box(9, 469, 40, 27, "Hex");
    { Fl_Value_Input* o = g_material4_d = new Fl_Value_Input(100, 440, 40, 24, "GREEN");
      o->labelsize(12);
      o->maximum(255);
      o->step(1);
      o->callback((Fl_Callback*)cb_g_material4_d);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Output* o = g_material4_h = new Fl_Output(100, 470, 40, 24);
      o->align(FL_ALIGN_CENTER);
    }
    { Fl_Value_Input* o = b_material4_d = new Fl_Value_Input(149, 440, 40, 24, "BLUE");
      o->labelsize(12);
      o->maximum(255);
      o->step(1);
      o->callback((Fl_Callback*)cb_b_material4_d);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Output* o = b_material4_h = new Fl_Output(149, 470, 40, 24);
      o->align(FL_ALIGN_CENTER);
    }
    { Fl_Value_Input* o = conductance_m4 = new Fl_Value_Input(100, 535, 70, 22, "Conductivity");
      o->callback((Fl_Callback*)cb_conductance_m4);
    }
    { Fl_Box* o = new Fl_Box(10, 245, 185, 149, "Material 3 Definition");
      o->box(FL_THIN_UP_FRAME);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Value_Input* o = r_material3_d = new Fl_Value_Input(51, 268, 40, 24, "RED");
      o->labelsize(12);
      o->maximum(255);
      o->step(1);
      o->callback((Fl_Callback*)cb_r_material3_d);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Output* o = r_material3_h = new Fl_Output(51, 298, 40, 24);
      o->align(FL_ALIGN_CENTER);
    }
    new Fl_Box(10, 267, 40, 27, "Dec");
    new Fl_Box(10, 297, 40, 27, "Hex");
    { Fl_Value_Input* o = g_material3_d = new Fl_Value_Input(101, 268, 40, 24, "GREEN");
      o->labelsize(12);
      o->maximum(255);
      o->step(1);
      o->callback((Fl_Callback*)cb_g_material3_d);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Output* o = g_material3_h = new Fl_Output(101, 298, 40, 24);
      o->align(FL_ALIGN_CENTER);
    }
    { Fl_Value_Input* o = b_material3_d = new Fl_Value_Input(149, 268, 40, 24, "BLUE");
      o->labelsize(12);
      o->maximum(255);
      o->step(1);
      o->callback((Fl_Callback*)cb_b_material3_d);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Output* o = b_material3_h = new Fl_Output(149, 298, 40, 24);
      o->align(FL_ALIGN_CENTER);
    }
    { Fl_Value_Input* o = conductance_m3 = new Fl_Value_Input(110, 364, 70, 25, "Conductivity");
      o->callback((Fl_Callback*)cb_conductance_m3);
    }
    { Fl_Box* o = new Fl_Box(15, 55, 185, 154, "Material 2 Definition");
      o->box(FL_THIN_UP_FRAME);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Value_Input* o = r_material2_d = new Fl_Value_Input(50, 78, 40, 24, "RED");
      o->labelsize(12);
      o->maximum(255);
      o->step(1);
      o->callback((Fl_Callback*)cb_r_material2_d);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Output* o = r_material2_h = new Fl_Output(51, 106, 40, 26);
      o->align(FL_ALIGN_CENTER);
    }
    new Fl_Box(14, 77, 40, 27, "Dec");
    new Fl_Box(12, 106, 40, 27, "Hex");
    { Fl_Value_Input* o = g_material2_d = new Fl_Value_Input(100, 78, 40, 24, "GREEN");
      o->labelsize(12);
      o->maximum(255);
      o->step(1);
      o->callback((Fl_Callback*)cb_g_material2_d);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Output* o = g_material2_h = new Fl_Output(101, 106, 40, 24);
      o->align(FL_ALIGN_CENTER);
    }
    { Fl_Value_Input* o = b_material2_d = new Fl_Value_Input(150, 78, 40, 24, "BLUE");
      o->labelsize(12);
      o->maximum(255);
      o->step(1);
      o->callback((Fl_Callback*)cb_b_material2_d);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Output* o = b_material2_h = new Fl_Output(149, 106, 40, 24);
      o->align(FL_ALIGN_CENTER);
    }
    { Fl_Value_Input* o = conductance_m2 = new Fl_Value_Input(115, 179, 70, 25, "Conductivity");
      o->callback((Fl_Callback*)cb_conductance_m2);
    }
    { Fl_Button* o = new Fl_Button(130, 575, 64, 20, "Close");
      o->callback((Fl_Callback*)cb_Close1);
    }
    { Fl_Choice* o = choice_material_4 = new Fl_Choice(15, 510, 175, 20, "Material");
      o->down_box(FL_BORDER_BOX);
      o->callback((Fl_Callback*)cb_choice_material_4);
      o->align(FL_ALIGN_TOP_LEFT);
      o->menu(menu_choice_material);
      o->value(5); // Index into copper
    }
    { Fl_Choice* o = choice_material_3 = new Fl_Choice(15, 340, 175, 20, "Material");
      o->down_box(FL_BORDER_BOX);
      o->callback((Fl_Callback*)cb_choice_material_3);
      o->align(FL_ALIGN_TOP_LEFT);
      o->menu(menu_choice_material);
      o->value(5); // Index into copper
    }
    { Fl_Choice* o = choice_material_2 = new Fl_Choice(20, 155, 175, 20, "Material");
      o->down_box(FL_BORDER_BOX);
      o->callback((Fl_Callback*)cb_choice_material_2);
      o->align(FL_ALIGN_TOP_LEFT);
      o->menu(menu_choice_material);
      o->value(5); // Index into copper
    }
    new Fl_Box(90, 9, 50, 21, "Conductivity in MS/m");
    o->set_non_modal();
    o->end();
  }
  return w;
}
Fl_Double_Window* config_window;
Fl_Double_Window* about_window;
Fl_Double_Window* main_window;
Fl_Double_Window* source_edit_window;
Fl_Double_Window* sink_edit_window;
Fl_Double_Window* substrate_edit_window;
Fl_Double_Window* material1_edit_window;
Fl_Double_Window* additional_edit_window;
